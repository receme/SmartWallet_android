package com.rcmapps.smartwallet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.rcmapps.smartwallet.db.Budget;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUDGET".
*/
public class BudgetDao extends AbstractDao<Budget, Long> {

    public static final String TABLENAME = "BUDGET";

    /**
     * Properties of entity Budget.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Total_amount = new Property(1, Integer.class, "total_amount", false, "TOTAL_AMOUNT");
        public final static Property Last_update = new Property(2, java.util.Date.class, "last_update", false, "LAST_UPDATE");
        public final static Property Budget_month = new Property(3, String.class, "budget_month", false, "BUDGET_MONTH");
    };


    public BudgetDao(DaoConfig config) {
        super(config);
    }
    
    public BudgetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUDGET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOTAL_AMOUNT\" INTEGER," + // 1: total_amount
                "\"LAST_UPDATE\" INTEGER," + // 2: last_update
                "\"BUDGET_MONTH\" TEXT);"); // 3: budget_month
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUDGET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Budget entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer total_amount = entity.getTotal_amount();
        if (total_amount != null) {
            stmt.bindLong(2, total_amount);
        }
 
        java.util.Date last_update = entity.getLast_update();
        if (last_update != null) {
            stmt.bindLong(3, last_update.getTime());
        }
 
        String budget_month = entity.getBudget_month();
        if (budget_month != null) {
            stmt.bindString(4, budget_month);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Budget readEntity(Cursor cursor, int offset) {
        Budget entity = new Budget( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // total_amount
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // last_update
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // budget_month
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Budget entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotal_amount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLast_update(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setBudget_month(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Budget entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Budget entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }


}
